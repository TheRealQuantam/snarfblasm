
Features planned:
    Debug output (take from Editroid)
    Error message expansion (could look something like ".Error This data exceeded its buffer by {$ - bufferEnd} byte(s)"
    Non-error message output (e.g. .Message and/or .Warning)
    Remove undotted directives and uncoloned labels entirely.
    Error on overlapping segments

Bugs to fix:
    Indentation of an .include can allegedly cause an error
    
Segments:
    Segments become a superset of .PATCHes    
        - A .PATCH will interpreted as a segment with appropriate defaults
            - A .PATCH will be assigned to an 'anonymous' segment
        - A segment gives extra control versus a .PATCH
            - Automatic bounds checking
            - Content duplication
            - Namespace binding
            - Contents do not need to be lexically contiguous. Code can be organized
              in the manner easiest to understand or manage, instead of in the order
              it must appear in the output.
        - The .SEGMENT directive selects, or "enters", a segment.
            - The same segment may be entered multiple times. Each time it picks up where
              it left off (the context, i.e. output stream and current address) is saved
              when the segment is exited).
        - Segments must be defined prior to use. A syntax is available to define them "inline"
        - A segment definition begins with ".DEFSEG {name}"
        - A segment definition ends with one of the following
            - .ENDDEF marks the end of a segment definition
            - .BEGINSEG marks the end of a definition, and "enters" the segment just defined
                - .BEGINSEG is equivalent to a .ENDDEF immediately followed by a .SEGMENT
        - The content of a segment definition (empty lines and comments aside) consists of 
          parameters in the form of "{name} = {value}" where each parameter may be defined 
          at most once unless otherwise indicated. Parameter names are case-insensitive and 
          are as follows:
            - "OUTPUT": required. May be "NONE" (case insensitive), a bank/address value (0F:1234),
              or an expression that evaluates to an offset.
                - "NONE" would generally be used to define names for addresses that correspond 
                  to RAM. Renders the segment functionally similar to a .ENUM directive.
                    - Ignored if other OUTPUT targets are specified
                - Specifying a bank/address value also implicitly specifies a BASE address.
                - The OUTPUT parameter may be defined multiple times.
                    - Doing so will cause the segment contents to be duplicated in each specified location
                    - If multiple bank/address values are specified, only the first defines the
                      segment's BASE address.
            - "BASE": Required under certain circumstances. Expression which evaluates to the base 
              address for the segment. 
                - Required unless an OUTPUT value is specified with a bank/address syntax
                - Overrides the base address specified by an OUTPUT with a bank/address syntax
            - "NAMESPACE": optional. Must be a valid identifier. If specified, when the segment
              is entered, the specified namespace is also selected. If not specified, entering
              the segment has no effect on which namespace is selected.
                - If a NAMESPACE parameter specifies an empty value ("NAMESPACE = "), the default
                  namespace will be used for the segment.
            - "SIZE": an expression which evaluates to the maximum number of bytes the segment
              may output. If OUTPUT is set to "NONE", the SIZE constraint is enforced as if
              output were generated. 
            - "LIMIT": an expression which evaluates to the highest address (exclusive) the
              segment's content can use. If OUTPUT is set to "NONE", the LIMIT constraint is
              enforced as if output were generated.
            - "PAD": optional. Expression which evaluates to a byte or word value that will
              be used to fill any unused space in the segment
                - Ignored unless SIZE or LIMIT is specified
        - Some examples:
            - Zero page variable space
                .DEFSEG ZeroPage
                  OUTPUT = NONE
                  BASE = 0
                  NAMESPACE =
                  SIZE = $100
                .BEGINSEG
                  MyVariable: .DSB 1 ; reserve 1 byte for MyVariable
                  ; etc
            - Vectors
                .DEFSEG Vectors
                  OUTPUT = 00:FFFA
                  OUTPUT = 01:FFFA
                  ;etc
                  NAMESPACE = 
                  SIZE = 6
                .BEGINSEG
                  .WORD NMI
                  .WORD RESET
                  .WORD IRQ
            - And, of course, segments can be used for your normal run-of-the-mill code.
                  
        
Namespacing:
    Default namespace (Referred to as such for internal technical reasons)
        - The default namespace is the default namespace with no name
        - This is the default namespace. Any and all identifiers in code that
          could be assembled with previous versions of snarfblasm would fall
          into this namespace.
        - This is NOT a global namespace. There is no global namespace.
    Identifiers can come in two forms:
        - Simple form: just a name, consisting of alphanumeric character and underscores
        - Qualified form: a namespace followed by the "::" symbol, followed by the simple form
            - Identifiers belonging to the default namespace can be qualified as "::identifier".
    Explicit Namespacing (declarations)
        - Label and variable declarations that include a namespace specifier are
          said to be explicitly namespaced. E.g. "registers::ppu_control := $2000"
    Implicit Namespacing (declarations)
        - Label and variable declarations that do not include a namespace specifier
          are assigned to the "current" namespace
            - The current namespace is the namespace most recently selected via a
              .NAMESPACE directive or any other means of selecting a namespace
    Identifier Matching
        - Qualified identifiers must match both a namespace and an identifier declared
          within that namespace
        - Simple identifiers can match any of the following, with the given precedence:
            1. Matching identifier in the current namespace
            2. Matching identifier in the default namespace
            3. Matching identifier in an imported namespace
            - In other words, default namespace shadows imported namespaces and the current
              namespace shadows the default namespace. The default namespace shadows imported
              namespaces so that behavior is consistent when the current namespace is the 
              default namespace, where (default shadows imported shadows default) could be
              perceived as ambiguous or unintuitive
    Importing Namespaces
        - A directive will most likely be implemented: .IMPORT
            - E.g. .IMPORT registers
                   LDA ppu_control          ; resolves to registers::ppu_control
    Optional Colons
        - Explicitly namespaced labels are not supported with ASM6 style syntax
        (e.g. "somelabel    LDA #$00" is valid but not "some::label    LDA #$00")
    Local labels
        - Local labels (those beginning with an "@" symbol) may not be namespaced.
            - These, in a manner, are placed in a nested namespace belonging to the
              non-local label to which the local label belongs


Random syntax ideas--Ignore these, they're pure silliness
    Array-style notation:
        - Indexed
            LDA ppu_buffer[y]       ; Array-style notation
            LDA ppu_buffer,y        ; Traditional
        - Indexed, Precalculated
            LDA ppu_buffer[y + 1]   ; Okay, this syntax works nice here
            LDA ppu_buffer + 1,Y    ; Traditional
        - Indirect
            LDA data_ptr[]          ; Reminiscient of C-style array notation on a pointer
            LDA [data_ptr]          ; NESASM style
            LDA (data_ptr)          ; Traditional
        - Indirect, post-indexed
            LDA data_ptr[y]         ; C-style array notation on a pointer--would likely require a special declaration (or it would read as simply indexed)
            LDA [data_ptr][y]       ; NESASM/Array-style combination
            LDA (data_ptr)[y]       ; Traditional indirect notation with array-style indexing
            LDA [data_ptr + y]      ; This seems hard to parse and prone to syntax issues
        - Indirect, pre-indexed
            LDA data_ptr[x][]       ; I don't even...
